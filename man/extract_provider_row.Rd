% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_provider.R
\name{extract_provider_row}
\alias{extract_provider_row}
\title{Extract Provider Row from JSON File}
\usage{
extract_provider_row(
  file,
  json_dir = NULL,
  extract_regulated_activities = FALSE,
  extract_inspection_categories = FALSE,
  extract_key_question_ratings = FALSE,
  extract_reports_nested = FALSE,
  extract_contacts_nested = FALSE,
  add_contacts_flag = TRUE,
  debug_contacts = FALSE
)
}
\arguments{
\item{file}{Character. Path to the provider JSON file to process}

\item{json_dir}{Character. Optional directory path for JSON files (currently unused)}

\item{extract_regulated_activities}{Logical. If TRUE, extracts regulated activities
as a nested dataframe in the 'regulatedActivities' column. Default: FALSE}

\item{extract_inspection_categories}{Logical. If TRUE, extracts inspection categories
as a nested dataframe in the 'inspectionCategories' column. Default: FALSE}

\item{extract_key_question_ratings}{Logical. If TRUE, extracts key question ratings
from currentRatings as a nested dataframe in the 'currentRatings_keyQuestionRatings'
column. Default: FALSE}

\item{extract_reports_nested}{Logical. If TRUE, extracts all reports as a nested
dataframe in the 'reports' column. Default: FALSE}

\item{extract_contacts_nested}{Logical. If TRUE, extracts contacts as a nested
dataframe in the 'contacts' column. Default: FALSE}

\item{add_contacts_flag}{Logical. If TRUE, adds a 'has_contacts_data' boolean
column indicating whether contact information exists. Default: TRUE}

\item{debug_contacts}{Logical. If TRUE, prints debug information during contacts
extraction. Useful for troubleshooting contact data issues. Default: FALSE}
}
\value{
A tibble with one row containing provider information. Core columns include:
  \itemize{
    \item \code{providerId} - Unique provider identifier
    \item \code{name} - Provider name
    \item \code{locationIds} - Semicolon-separated list of associated location IDs
    \item \code{organisationType} - Type of organisation
    \item \code{registrationStatus} - Current registration status
    \item Address fields (\code{postalAddressLine1}, \code{postalCode}, etc.)
    \item Rating fields (\code{currentRatings_overall_rating}, key question ratings)
    \item Date fields (\code{registrationDate}, \code{lastInspection_date})
    \item Optional nested columns based on extraction parameters
  }
  If an error occurs during processing, returns a minimal tibble with
  \code{providerId}, \code{name}, and \code{error_message} columns.
}
\description{
Extracts structured data from a CQC provider JSON file and returns it as a
single-row tibble. The function handles various nested structures including
contacts, regulated activities, inspection categories, ratings, and reports.
Provides options to extract nested data as list columns for detailed analysis.
}
\details{
The function safely handles missing or malformed data by using helper functions
that return NA values when data is unavailable. Nested structures are flattened
into character fields (semicolon-separated) unless explicitly requested as
nested dataframes via the extraction parameters.

Key question ratings include: Caring, Effective, Responsive, Safe, and Well-led.

The function wraps all processing in a tryCatch block and will return a minimal
error tibble if processing fails completely.
}
\examples{
\dontrun{
# Basic extraction with default settings
provider_data <- extract_provider_row("provider_1-12345.json")

# Extract all nested structures
provider_full <- extract_provider_row(
  "provider_1-12345.json",
  extract_regulated_activities = TRUE,
  extract_inspection_categories = TRUE,
  extract_key_question_ratings = TRUE,
  extract_reports_nested = TRUE,
  extract_contacts_nested = TRUE
)

# Debug contacts extraction
provider_debug <- extract_provider_row(
  "provider_1-12345.json",
  extract_contacts_nested = TRUE,
  debug_contacts = TRUE
)

# Process multiple files
json_files <- list.files("provider_jsons/", pattern = "*.json", full.names = TRUE)
provider_list <- lapply(json_files, extract_provider_row)
provider_df <- dplyr::bind_rows(provider_list)
}

}
\seealso{
\code{\link{extract_location_row}} for similar functionality with location data
}
